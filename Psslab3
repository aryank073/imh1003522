#include <iostream>
#include <cmath>

int main() {
    // Given data
    int numTrials = 100;
    int n = 3;  // Number of coins
    int observedFrequencies[4] = {36, 40, 22, 2};  // Frequencies for 0, 1, 2, 3 heads

    // Step 1: Estimate probability p
    int totalHeads = 0;
    for (int k = 0; k <= 3; ++k) {
        totalHeads += k * observedFrequencies[k];
    }
    double estimatedP = static_cast<double>(totalHeads) / (numTrials * n);

    std::cout << "Estimated probability p: " << estimatedP << std::endl;

    // Step 2: Calculate expected frequencies based on binomial distribution
    double expectedFrequencies[4];
    for (int k = 0; k <= 3; ++k) {
        // Calculate n choose k
        int nCk = 1;
        for (int i = 0; i < k; ++i) {
            nCk *= (n - i);
            nCk /= (i + 1);
        }

        // Calculate binomial probability P(X = k)
        double probability = nCk * pow(estimatedP, k) * pow(1 - estimatedP, n - k);

        // Calculate expected frequency
        expectedFrequencies[k] = probability * numTrials;

        // Output the expected frequency
        std::cout << "Expected frequency for " << k << " heads: " << expectedFrequencies[k] << std::endl;
    }

    return 0;
}
